/* Generated By:CSharpCC: Do not edit this line. TokenMgrError.cs Version 3.0 */
using System;

namespace SpiceSharp.Parser
{
    /// <summary>
    /// Token manager exception
    /// This class is generated by CSharpCC (a port of JavaCC to C#). Refer to spicelang.cc for the syntax.
    /// </summary>
    [Serializable]
    public class TokenMgrError : SystemException
    {
        /*
         * Ordinals for various reasons why an Exceptions of this type can be thrown.
         */

        /// <summary>
        /// Lexical error occured.
        /// </summary>
        internal static readonly int LexicalError = 0;

        /// <summary>
        /// An attempt wass made to create a second instance of a static token manager.
        /// </summary>
        internal static readonly int StaticLexerError = 1;

        /// <summary>
        /// Tried to change to an invalid lexical state.
        /// </summary>
        internal static readonly int InvalidLexicalState = 2;

        /// <summary>
        /// Detected (and bailed out of) an infinite loop in the token manager.
        /// </summary>
        internal static readonly int LoopDetected = 3;

        /// <summary>
        /// Indicates the reason why the exception is thrown. It will have
        /// one of the above 4 values.
        /// </summary>
        int errorCode;

        /// <summary>
        /// Replaces unprintable characters by their espaced (or unicode escaped)
        /// equivalents in the given string
        /// </summary>
        protected static string AddEscapes(string str)
        {
            System.Text.StringBuilder retval = new System.Text.StringBuilder();
            char ch;
            for (int i = 0; i < str.Length; i++)
            {
                switch (str[i])
                {
                    case '\0':
                        continue;
                    case '\b':
                        retval.Append("\\b");
                        continue;
                    case '\t':
                        retval.Append("\\t");
                        continue;
                    case '\n':
                        retval.Append("\\n");
                        continue;
                    case '\f':
                        retval.Append("\\f");
                        continue;
                    case '\r':
                        retval.Append("\\r");
                        continue;
                    case '\"':
                        retval.Append("\\\"");
                        continue;
                    case '\'':
                        retval.Append("\\\'");
                        continue;
                    case '\\':
                        retval.Append("\\\\");
                        continue;
                    default:
                        if ((ch = str[i]) < 0x20 || ch > 0x7e)
                        {
                            string s = "0000" + System.Convert.ToString((int)ch, 16);
                            retval.Append("\\u" + s.Substring(s.Length - 4, s.Length - (s.Length - 4)));
                        }
                        else
                        {
                            retval.Append(ch);
                        }
                        continue;
                }
            }
            return retval.ToString();
        }

        /// <summary>
        /// Returns a detailed message for the Exception when it is thrown by the
        /// token manager to indicate a lexical error.
        /// Parameters : 
        ///    EOFSeen     : indicates if EOF caused the lexicl error
        ///    curLexState : lexical state in which this error occured
        ///    errorLine   : line number when the error occured
        ///    errorColumn : column number when the error occured
        ///    errorAfter  : prefix that was seen before this error occured
        ///    curchar     : the offending character
        /// Note: You can customize the lexical error message by modifying this method.
        /// </summary>
        protected static string GetLexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar)
        {
            return ("Lexical error at line " +
                 errorLine + ", column " +
                 errorColumn + ".  Encountered: " +
                 (EOFSeen ? "<EOF> " : ("\"" + AddEscapes(curChar.ToString()) + "\"") + " (" + (int)curChar + "), ") +
                 "after : \"" + AddEscapes(errorAfter) + "\"");
        }

        /// <summary>
        /// You can also modify the body of this method to customize your error messages.
        /// For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
        /// of end-users concern, so you can return something like : 
        ///
        ///     "Internal Error : Please file a bug report .... "
        ///
        /// from this method for such cases in the release version of your parser.
        /// </summary>
        public override string Message
        {
            get { return base.Message; }
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public TokenMgrError()
        {
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="message">Message</param>
        /// <param name="reason">Reason</param>
        public TokenMgrError(string message, int reason) :
           base(message)
        {
            errorCode = reason;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="EOFSeen">End of file</param>
        /// <param name="lexState">Lexer state</param>
        /// <param name="errorLine">Error line number</param>
        /// <param name="errorColumn">Error column number</param>
        /// <param name="errorAfter">Error after</param>
        /// <param name="curChar">Current character</param>
        /// <param name="reason">Reason</param>
        public TokenMgrError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar, int reason) :
           this(GetLexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason)
        {
        }
    }
}