/* Generated By:CSharpCC: Do not edit this line. SpiceSharpExpressionParserTokenManager.cs */
namespace SpiceSharp.Parser.Expressions {

using System;
using System.Globalization;
using System.Collections.Generic;

public  class SpiceSharpExpressionParserTokenManager : SpiceSharpExpressionParserConstants {
  public  System.IO.TextWriter debugStream = Console.Out;
  public  void SetDebugStream(System.IO.TextWriter ds) { debugStream = ds; }
private int mccStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private int mccStartNfa_0(int pos, long active0)
{
   return mccMoveNfa_0(mccStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int mccStopAtPos(int pos, int kind)
{
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   return pos + 1;
}
private int mccStartNfaWithStates_0(int pos, int kind, int state) {
   mccmatchedKind = kind;
   mccmatchedPos = pos;
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) { return pos + 1; }
   return mccMoveNfa_0(state, pos + 1);
}
private int mccMoveStringLiteralDfa0_0()
{
   switch((int)curChar) {
      case 33:
         mccmatchedKind = 7;
         return mccMoveStringLiteralDfa1_0(512L);
      case 37:
         return mccStopAtPos(0, 17);
      case 38:
         return mccMoveStringLiteralDfa1_0(16384L);
      case 40:
         return mccStopAtPos(0, 20);
      case 41:
         return mccStopAtPos(0, 21);
      case 42:
         return mccStopAtPos(0, 4);
      case 43:
         return mccStopAtPos(0, 3);
      case 44:
         return mccStopAtPos(0, 16);
      case 45:
         return mccStopAtPos(0, 5);
      case 47:
         return mccStopAtPos(0, 6);
      case 58:
         return mccStopAtPos(0, 19);
      case 60:
         mccmatchedKind = 12;
         return mccMoveStringLiteralDfa1_0(8192L);
      case 61:
         return mccMoveStringLiteralDfa1_0(256L);
      case 62:
         mccmatchedKind = 10;
         return mccMoveStringLiteralDfa1_0(2048L);
      case 63:
         return mccStopAtPos(0, 18);
      case 124:
         return mccMoveStringLiteralDfa1_0(32768L);
      default :
         return mccMoveNfa_0(0, 0);
   }
}
private int mccMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.ReadChar(); }
   catch(System.IO.IOException) {
      mccStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch((int)curChar) {
      case 38:
         if ((active0 & 16384L) != 0L)
            return mccStopAtPos(1, 14);
         break;
      case 61:
         if ((active0 & 256L) != 0L)
            return mccStopAtPos(1, 8);
         else if ((active0 & 512L) != 0L)
            return mccStopAtPos(1, 9);
         else if ((active0 & 2048L) != 0L)
            return mccStopAtPos(1, 11);
         else if ((active0 & 8192L) != 0L)
            return mccStopAtPos(1, 13);
         break;
      case 124:
         if ((active0 & 32768L) != 0L)
            return mccStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return mccStartNfa_0(0, active0);
}
private void mccCheckNAdd(int state)
{
   if (mccrounds[state] != mccround)
   {
      mccstateSet[mccnewStateCnt++] = state;
      mccrounds[state] = mccround;
   }
}
private void mccAddStates(int start, int end)
{
   do {
      mccstateSet[mccnewStateCnt++] = mccnextStates[start];
   } while (start++ != end);
}
private void mccCheckNAddTwoStates(int state1, int state2)
{
   mccCheckNAdd(state1);
   mccCheckNAdd(state2);
}
private void mccCheckNAddStates(int start, int end)
{
   do {
      mccCheckNAdd(mccnextStates[start]);
   } while (start++ != end);
}
private void mccCheckNAddStates(int start)
{
   mccCheckNAdd(mccnextStates[start]);
   mccCheckNAdd(mccnextStates[start + 1]);
}
static readonly long[] mccbitVec0 = {
   0L, 0L, -1L, -1L
};
private int mccMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   mccnewStateCnt = 28;
   int i = 1;
   mccstateSet[0] = startState;
   int j, kind = Int32.MaxValue;
   for (;;)
   {
      if (++mccround == Int32.MaxValue)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
                  if ((287948901175001088 & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     mccCheckNAddStates(0, 7);
                  }
                  else if (curChar == 46)
                     mccCheckNAddStates(8, 10);
                  else if (curChar == 34)
                     mccCheckNAddStates(11, 13);
                  break;
               case 1:
                  if ((-17179878401 & l) != 0L)
                     mccCheckNAddStates(11, 13);
                  break;
               case 3:
                  if ((566935692288 & l) != 0L)
                     mccCheckNAddStates(11, 13);
                  break;
               case 4:
                  if (curChar == 34 && kind > 25)
                     kind = 25;
                  break;
               case 5:
                  if (curChar == 10)
                     mccCheckNAddStates(11, 13);
                  break;
               case 6:
                  if (curChar == 13)
                     mccstateSet[mccnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  mccstateSet[mccnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  mccCheckNAddStates(0, 7);
                  break;
               case 10:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  mccCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar != 46)
                     break;
                  if (kind > 22)
                     kind = 22;
                  mccCheckNAdd(12);
                  break;
               case 12:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  mccCheckNAdd(12);
                  break;
               case 13:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(14, 16);
                  break;
               case 14:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(15, 16);
                  break;
               case 15:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((43980465111040 & l) != 0L)
                     mccCheckNAdd(18);
                  break;
               case 18:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  mccCheckNAdd(18);
                  break;
               case 19:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddStates(17, 19);
                  break;
               case 20:
                  if (curChar == 46)
                     mccCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(21, 22);
                  break;
               case 24:
                  if (curChar == 46)
                     mccCheckNAddStates(8, 10);
                  break;
               case 25:
                  if ((287948901175001088 & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  mccCheckNAdd(25);
                  break;
               case 26:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(26, 16);
                  break;
               case 27:
                  if ((287948901175001088 & l) != 0L)
                     mccCheckNAddTwoStates(27, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 0:
               case 8:
                  if ((576460743847706622 & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  mccCheckNAdd(8);
                  break;
               case 1:
                  if ((-268435457 & l) != 0L)
                     mccCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (curChar == 92)
                     mccAddStates(20, 21);
                  break;
               case 3:
                  if ((5700160605929540 & l) != 0L)
                     mccCheckNAddStates(11, 13);
                  break;
               case 16:
                  if ((137438953504 & l) != 0L)
                     mccAddStates(22, 23);
                  break;
               case 22:
                  if ((13907447705069760 & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  mccCheckNAdd(23);
                  break;
               case 23:
                  if ((576460743847706622 & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  mccCheckNAdd(23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 63);
         do
         {
            switch(mccstateSet[--i])
            {
               case 1:
                  if ((mccbitVec0[i2] & l2) != 0L)
                     mccAddStates(11, 13);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != Int32.MaxValue)
      {
         mccmatchedKind = kind;
         mccmatchedPos = curPos;
         kind = Int32.MaxValue;
      }
      ++curPos;
      if ((i = mccnewStateCnt) == (startsAt = 28 - (mccnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.ReadChar(); }
      catch(System.IO.IOException) { return curPos; }
   }
}
static readonly int[] mccnextStates = {
   10, 11, 13, 14, 16, 19, 20, 22, 25, 26, 27, 1, 2, 4, 13, 14, 
   16, 19, 20, 22, 3, 6, 17, 18, 
};
public static readonly string[] mccstrLiteralImages = {
"", null, null, "+", "*", "-", "/", "!", "==", "!=", ">", ">=", "<", "<=", 
"&&", "||", ",", "%", "?", ":", "(", ")", null, null, null, null, null, null, null, 
null, };
public static readonly string[] lexStateNames = {
   "DEFAULT", 
};
static readonly long[] mcctoToken = {
   134217721, 
};
static readonly long[] mcctoSkip = {
   6, 
};
protected SimpleCharStream input_stream;
private readonly int[] mccrounds = new int[28];
private readonly int[] mccstateSet = new int[56];
protected char curChar;
public SpiceSharpExpressionParserTokenManager(SimpleCharStream stream) {
   if (SimpleCharStream.staticFlag)
      throw new System.SystemException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public SpiceSharpExpressionParserTokenManager(SimpleCharStream stream, int lexState)
   : this(stream) {
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream) {
   mccmatchedPos = mccnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   mccround = -2147483647;
   for (i = 28; i-- > 0;)
      mccrounds[i] = Int32.MinValue;
}
public void ReInit(SimpleCharStream stream, int lexState) {
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState) {
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.InvalidLexicalState);
   else
      curLexState = lexState;
}

protected Token mccFillToken()
{
   Token t = Token.NewToken(mccmatchedKind);
   t.kind = mccmatchedKind;
   string im = mccstrLiteralImages[mccmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.BeginLine;
   t.beginColumn = input_stream.BeginColumn;
   t.endLine = input_stream.EndLine;
   t.endColumn = input_stream.EndColumn;
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int mccnewStateCnt;
int mccround;
int mccmatchedPos;
int mccmatchedKind;

public Token GetNextToken() {
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

for (;;) {
   try {
      curChar = input_stream.BeginToken();
   } catch(System.IO.IOException) {
      mccmatchedKind = 0;
      matchedToken = mccFillToken();
      return matchedToken;
   }

   try { input_stream.Backup(0);
      while (curChar <= ' ' && (4294967808L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   } catch (System.IO.IOException) { goto EOFLoop; }
   mccmatchedKind = Int32.MaxValue;
   mccmatchedPos = 0;
   curPos = mccMoveStringLiteralDfa0_0();
   if (mccmatchedKind != Int32.MaxValue) {
      if (mccmatchedPos + 1 < curPos)
         input_stream.Backup(curPos - mccmatchedPos - 1);
      if ((mcctoToken[mccmatchedKind >> 6] & (1L << (mccmatchedKind & 63))) != 0L) {
         matchedToken = mccFillToken();
         return matchedToken;
      }
      else
      {
         goto EOFLoop;
      }
   }
   int error_line = input_stream.EndLine;
   int error_column = input_stream.EndColumn;
   string error_after = null;
   bool EOFSeen = false;
   try { input_stream.ReadChar(); input_stream.Backup(1); }
   catch (System.IO.IOException) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      } else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.Backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LexicalError);
EOFLoop: ;
  }
}

}
}
