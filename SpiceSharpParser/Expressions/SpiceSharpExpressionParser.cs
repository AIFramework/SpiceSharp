/* Generated By:CSharpCC: Do not edit this line. SpiceSharpExpressionParser.cs */
namespace SpiceSharp.Parser.Expressions {

using System;
using System.Globalization;
using System.Collections.Generic;
public class SpiceSharpExpressionParser : SpiceSharpExpressionParserConstants {
        /// <summary>
        /// The parameters that this parser can read
        /// </summary>
        public Dictionary<String, Double> Parameters = new Dictionary<String, Double>();

        /// <summary>
        /// Call a function with parameters
        /// </summary>
        private Double FunctionCall(string func, double[] parameters)
        {
                double r;
                switch (func)
                {
                case "sin": if (parameters.Length != 1) throw new ParseException("Sin expects 1 parameter"); return Math.Sin(parameters[0]);
                case "cos": if (parameters.Length != 1) throw new ParseException("Cos expects 1 parameter"); return Math.Cos(parameters[0]);
                case "tan": if (parameters.Length != 1) throw new ParseException("Tan expects 1 parameter"); return Math.Tan(parameters[0]);
                case "sinh": if (parameters.Length != 1) throw new ParseException("Sinh expects 1 parameter"); return Math.Sinh(parameters[0]);
                case "cosh": if (parameters.Length != 1) throw new ParseException("Cosh expects 1 parameter"); return Math.Cosh(parameters[0]);
                case "sqrt": if (parameters.Length != 1) throw new ParseException("Sqrt expects 1 parameter"); return Math.Sqrt(parameters[0]);
                case "exp": if (parameters.Length != 1) throw new ParseException("Exp expects 1 parameter"); return Math.Exp(parameters[0]);
                case "log": if (parameters.Length != 1) throw new ParseException("Log expects 1 parameter"); return Math.Log(parameters[0]);
                case "log10": if (parameters.Length != 1) throw new ParseException("Log10 expects 1 parameter"); return Math.Log10(parameters[0]);
                case "max":
                        if (parameters.Length < 2)
                                throw new ParseException("Max expects at least 2 parameters");
                        r = parameters[0];
                        for (int i = 1; i < parameters.Length; i++)
                                r = parameters[i] > r ? parameters[i] : r;
                        return r;
                case "min":
                        if (parameters.Length < 2)
                                throw new ParseException("Min expects at least 2 parameters");
                        r = parameters[0];
                        for (int i = 1; i < parameters.Length; i++)
                                r = parameters[i] < r ? parameters[i] : r;
                        return r;
                default:
                        throw new ParseException("Unrecognized function \"" + func + "\"");
                }
        }

        /// <summary>
        /// Convert a Spice-format value
        /// </summary>
        private Double ParseSpice(string s)
        {
                // Get all doubles and dots
                s = s.ToLower();
                double d;
                int i = 0;
                while (s[i] == '.' || char.IsDigit(s[i]))
                        i++;
                d = double.Parse(s.Substring(0, i), CultureInfo.InvariantCulture);
                s = s.Substring(i);
                switch (s[0])
                {
                case 't': d *= 1e12; break;
                case 'g': d *= 1e9; break;
                case 'm':
                        if (s.StartsWith("mil"))
                                d *= 25.4e-6;
                        else if (s.StartsWith("meg"))
                                d *= 1e6;
                        else
                                d *= 1e-3;
                        break;
                case 'k': d *= 1e3; break;
                case 'u': d *= 1e-6; break;
                case 'n': d *= 1e-9; break;
                case 'p': d *= 1e-12; break;
                case 'f': d *= 1e-15; break;
                }
                return d;
        }

// Parser methods
  public double ParseExpression() {
        double r;
    r = ParseConditional();
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Parse conditional statements
/// </summary>
  public double ParseConditional() {
        double r, a, b;
    r = ParseConditionalOr();
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case QUESTION:
      mcc_consume_token(QUESTION);
      a = ParseConditional();
      mcc_consume_token(COLON);
      b = ParseConditional();
                                                                                    r = r > 0.0 ? a : b;
      break;
    default:
      mcc_la1[0] = mcc_gen;
      ;
      break;
    }
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Parse conditional OR ||
/// </summary>
  public double ParseConditionalOr() {
        double r, a;
    r = ParseConditionalAnd();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case OR:
        ;
        break;
      default:
        mcc_la1[1] = mcc_gen;
        goto label_1;
      }
      mcc_consume_token(OR);
      a = ParseConditionalAnd();
                                                                    {return (r > 0.0) || (a > 0.0) ? 1.0 : 0.0;}
    }label_1: ;
    
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Parse conditional AND &&
/// </summary>
  public double ParseConditionalAnd() {
        double r, a;
    r = ParseRelational();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case AND:
        ;
        break;
      default:
        mcc_la1[2] = mcc_gen;
        goto label_2;
      }
      mcc_consume_token(AND);
      a = ParseRelational();
                                                             {return (r > 0.0) && (a > 0.0) ? 1.0 : 0.0;}
    }label_2: ;
    
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Relational operators
/// </summary>
  public double ParseRelational() {
        double r, a;
    r = ParseAdditive();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case EQUALS:
      case NOTEQUALS:
      case GREATERTHAN:
      case GREATERTHANEQUAL:
      case SMALLERTHAN:
      case SMALLERTHANEQUAL:
        ;
        break;
      default:
        mcc_la1[3] = mcc_gen;
        goto label_3;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case SMALLERTHAN:
        mcc_consume_token(SMALLERTHAN);
        a = ParseAdditive();
                                                    r = r < a ? 1.0 : 0.0;
        break;
      case GREATERTHAN:
        mcc_consume_token(GREATERTHAN);
        a = ParseAdditive();
                                                      r = r > a ? 1.0 : 0.0;
        break;
      case SMALLERTHANEQUAL:
        mcc_consume_token(SMALLERTHANEQUAL);
        a = ParseAdditive();
                                                           r = r <= a ? 1.0 : 0.0;
        break;
      case GREATERTHANEQUAL:
        mcc_consume_token(GREATERTHANEQUAL);
        a = ParseAdditive();
                                                           r = r >= a ? 1.0 : 0.0;
        break;
      case EQUALS:
        mcc_consume_token(EQUALS);
        a = ParseAdditive();
                                                 r = r == a ? 1.0 : 0.0;
        break;
      case NOTEQUALS:
        mcc_consume_token(NOTEQUALS);
        a = ParseAdditive();
                                                    r = r != a ? 1.0 : 0.0;
        break;
      default:
        mcc_la1[4] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_3: ;
    
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Additive operators
/// </summary>
  public double ParseAdditive() {
        double r, a;
    r = ParseMultiplicative();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ADD:
      case SUBTRACT:
        ;
        break;
      default:
        mcc_la1[5] = mcc_gen;
        goto label_4;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case ADD:
        mcc_consume_token(ADD);
        a = ParseMultiplicative();
                                                  r = r + a;
        break;
      case SUBTRACT:
        mcc_consume_token(SUBTRACT);
        a = ParseMultiplicative();
                                                         r = r - a;
        break;
      default:
        mcc_la1[6] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_4: ;
    
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Multiplicative operators
/// </summary>
  public double ParseMultiplicative() {
        double r, a;
    // Left associative
            r = ParseUnary();
    while (true) {
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        mcc_la1[7] = mcc_gen;
        goto label_5;
      }
      switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
      case MULTIPLY:
        mcc_consume_token(MULTIPLY);
        a = ParseUnary();
                                              r = r * a;
        break;
      case DIVIDE:
        mcc_consume_token(DIVIDE);
        a = ParseUnary();
                                              r = r / a;
        break;
      case MODULO:
        mcc_consume_token(MODULO);
        a = ParseUnary();
                                              r = r % a;
        break;
      default:
        mcc_la1[8] = mcc_gen;
        mcc_consume_token(-1);
        throw new ParseException();
      }
    }label_5: ;
    
                {return r;}
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Unary operators
/// </summary>
  public double ParseUnary() {
        double r;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SUBTRACT:
      mcc_consume_token(SUBTRACT);
      r = ParsePrimary();
                                        {return -r;}
      break;
    case ADD:
      mcc_consume_token(ADD);
      r = ParsePrimary();
                                     {return r;}
      break;
    case NOT:
      mcc_consume_token(NOT);
      r = ParsePrimary();
                                     if (r == 0.0) {return 1.0;} else {return 0.0;}
      break;
    case RBLEFT:
    case VALUE:
    case SCIVALUE:
    case SPICEVALUE:
    case WORD:
      r = ParsePrimary();
                               {return r;}
      break;
    default:
      mcc_la1[9] = mcc_gen;
      mcc_consume_token(-1);
      throw new ParseException();
    }
    throw new Exception("Missing return statement in function");
  }

/// <summary>
/// Primary operators
/// </summary>
  public double ParsePrimary() {
        Token t;
        string s;
        double r;
        List<Double> pars;
    switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
    case SCIVALUE:
      // Normal scientific notation
              t = mcc_consume_token(SCIVALUE);
                        {return double.Parse(t.image, CultureInfo.InvariantCulture);}
      break;
    case SPICEVALUE:
      t = mcc_consume_token(SPICEVALUE);
                            {return ParseSpice(t.image);}
      break;
    case VALUE:
      t = mcc_consume_token(VALUE);
                        {return double.Parse(t.image, CultureInfo.InvariantCulture);}
      break;
    default:
      mcc_la1[12] = mcc_gen;
      if (mcc_2_1(2)) {
        t = mcc_consume_token(WORD);
                                    pars = new List<Double>();
        mcc_consume_token(RBLEFT);
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case ADD:
        case SUBTRACT:
        case NOT:
        case RBLEFT:
        case VALUE:
        case SCIVALUE:
        case SPICEVALUE:
        case WORD:
          r = ParseExpression();
                                         pars.Add(r);
          while (true) {
            switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
            case COMMA:
              ;
              break;
            default:
              mcc_la1[10] = mcc_gen;
              goto label_6;
            }
            mcc_consume_token(COMMA);
            r = ParseExpression();
                                                                                     pars.Add(r);
          }label_6: ;
          
          break;
        default:
          mcc_la1[11] = mcc_gen;
          ;
          break;
        }
        mcc_consume_token(RBRIGHT);
                {return FunctionCall(t.image.ToLower(), pars.ToArray());}
      } else {
        switch ((mcc_ntk==-1)?mcc_mntk():mcc_ntk) {
        case WORD:
          t = mcc_consume_token(WORD);
                s = t.image.ToLower();
        if (Parameters == null || !Parameters.ContainsKey(s))
                {throw new ParseException("Could not find parameter \"" + t.image + "\"");}
        {return Parameters[s];}
          break;
        case RBLEFT:
          mcc_consume_token(RBLEFT);
          r = ParseExpression();
          mcc_consume_token(RBRIGHT);
                {return r;}
          break;
        default:
          mcc_la1[13] = mcc_gen;
          mcc_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    }
    throw new Exception("Missing return statement in function");
  }

  private bool mcc_2_1(int xla) {
    mcc_la = xla; mcc_lastpos = mcc_scanpos = token;
    try { return !mcc_3_1(); }
    catch(LookaheadSuccess) { return true; }
    finally { mcc_save(0, xla); }
  }

  private bool mcc_3_1() {
    if (mcc_scan_token(WORD)) return true;
    if (mcc_scan_token(RBLEFT)) return true;
    return false;
  }

  public SpiceSharpExpressionParserTokenManager token_source;
  SimpleCharStream mcc_input_stream;
  public Token token, mcc_nt;
  private int mcc_ntk;
  private Token mcc_scanpos, mcc_lastpos;
  private int mcc_la;
  public bool lookingAhead = false;
  private bool mcc_semLA;
  private int mcc_gen;
  private int[] mcc_la1 = new int[14];
  static private int[] mcc_la1_0;
  static SpiceSharpExpressionParser() {
      mcc_gla1_0();
   }
   private static void mcc_gla1_0() {
      mcc_la1_0 = new int[] {262144,32768,16384,16128,16128,40,40,131152,131152,97517736,65536,97517736,29360128,68157440,};
   }
  private MccCalls[] mcc_2_rtns = new MccCalls[1];
  private bool mcc_rescan = false;
  private int mcc_gc = 0;

  public SpiceSharpExpressionParser(System.IO.Stream stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpiceSharpExpressionParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.Stream stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SpiceSharpExpressionParser(System.IO.TextReader stream) {
    mcc_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpiceSharpExpressionParserTokenManager(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(System.IO.TextReader stream) {
    mcc_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(mcc_input_stream);
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public SpiceSharpExpressionParser(SpiceSharpExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

  public void ReInit(SpiceSharpExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    mcc_ntk = -1;
    mcc_gen = 0;
    for (int i = 0; i < 14; i++) mcc_la1[i] = -1;
    for (int i = 0; i < mcc_2_rtns.Length; i++) mcc_2_rtns[i] = new MccCalls();
  }

   private Token mcc_consume_token(int kind) {
    Token oldToken = null;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    if (token.kind == kind) {
      mcc_gen++;
      if (++mcc_gc > 100) {
        mcc_gc = 0;
        for (int i = 0; i < mcc_2_rtns.Length; i++) {
          MccCalls c = mcc_2_rtns[i];
          while (c != null) {
            if (c.gen < mcc_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    mcc_kind = kind;
    throw GenerateParseException();
  }

  private class LookaheadSuccess : System.Exception { }
  private LookaheadSuccess mcc_ls = new LookaheadSuccess();
  private bool mcc_scan_token(int kind) {
    if (mcc_scanpos == mcc_lastpos) {
      mcc_la--;
      if (mcc_scanpos.next == null) {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next = token_source.GetNextToken();
      } else {
        mcc_lastpos = mcc_scanpos = mcc_scanpos.next;
      }
    } else {
      mcc_scanpos = mcc_scanpos.next;
    }
    if (mcc_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != mcc_scanpos) { i++; tok = tok.next; }
      if (tok != null) mcc_add_error_token(kind, i);
    }
    if (mcc_scanpos.kind != kind) return true;
    if (mcc_la == 0 && mcc_scanpos == mcc_lastpos) throw mcc_ls;
    return false;
  }

  public Token GetNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.GetNextToken();
    mcc_ntk = -1;
    mcc_gen++;
    return token;
  }

  public Token GetToken(int index) {
    Token t = lookingAhead ? mcc_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.GetNextToken();
    }
    return t;
  }

  private int mcc_mntk() {
    if ((mcc_nt=token.next) == null)
      return (mcc_ntk = (token.next=token_source.GetNextToken()).kind);
    else
      return (mcc_ntk = mcc_nt.kind);
  }

  private System.Collections.ArrayList mcc_expentries = new System.Collections.ArrayList();
  private int[] mcc_expentry;
  private int mcc_kind = -1;
  private int[] mcc_lasttokens = new int[100];
  private int mcc_endpos;

  private void mcc_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == mcc_endpos + 1) {
      mcc_lasttokens[mcc_endpos++] = kind;
    } else if (mcc_endpos != 0) {
      mcc_expentry = new int[mcc_endpos];
      for (int i = 0; i < mcc_endpos; i++) {
        mcc_expentry[i] = mcc_lasttokens[i];
      }
      bool exists = false;
      for (System.Collections.IEnumerator e = mcc_expentries.GetEnumerator(); e.MoveNext();) {
        int[] oldentry = (int[])e.Current;
        if (oldentry.Length == mcc_expentry.Length) {
          exists = true;
          for (int i = 0; i < mcc_expentry.Length; i++) {
            if (oldentry[i] != mcc_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) mcc_expentries.Add(mcc_expentry);
      if (pos != 0) mcc_lasttokens[(mcc_endpos = pos) - 1] = kind;
    }
  }

  public ParseException GenerateParseException() {
    mcc_expentries.Clear();
    bool[] la1tokens = new bool[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (mcc_kind >= 0) {
      la1tokens[mcc_kind] = true;
      mcc_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (mcc_la1[i] == mcc_gen) {
        for (int j = 0; j < 32; j++) {
          if ((mcc_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        mcc_expentry = new int[1];
        mcc_expentry[0] = i;
        mcc_expentries.Add(mcc_expentry);
      }
    }
    mcc_endpos = 0;
    mcc_rescan_token();
    mcc_add_error_token(0, 0);
    int[][] exptokseq = new int[mcc_expentries.Count][];
    for (int i = 0; i < mcc_expentries.Count; i++) {
      exptokseq[i] = (int[])mcc_expentries[i];
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  public void enable_tracing() {
  }

  public void disable_tracing() {
  }

  private void mcc_rescan_token() {
    mcc_rescan = true;
    for (int i = 0; i < 1; i++) {
      MccCalls p = mcc_2_rtns[i];
      do {
        if (p.gen > mcc_gen) {
          mcc_la = p.arg; mcc_lastpos = mcc_scanpos = p.first;
          switch (i) {
            case 0: mcc_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    mcc_rescan = false;
  }

  private void mcc_save(int index, int xla) {
    MccCalls p = mcc_2_rtns[index];
    while (p.gen > mcc_gen) {
      if (p.next == null) { p = p.next = new MccCalls(); break; }
      p = p.next;
    }
    p.gen = mcc_gen + xla - mcc_la; p.first = token; p.arg = xla;
  }

  class MccCalls {
    public int gen;
    public Token first;
    public int arg;
    public MccCalls next;
  }

}
}
