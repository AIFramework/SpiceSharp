using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SpiceSharp.Simulations;

namespace SpiceSharpTest.Models.Semiconductors
{
    /// <summary>
    /// From LTSpice
    /// .model 1N914 D(Is= 2.52n Rs = .568 N= 1.752 Cjo= 4p M = .4 tt= 20n Iave = 200m Vpk= 75 mfg= OnSemi type= silicon)
    /// </summary>
    [TestClass]
    public class SpiceSharpDiodeTest : Framework
    {
        [TestMethod]
        public void TestDiodeDC()
        {
            // Expected values:
            // As simulated by ngSpice via PartSim
            double[] reference = new double[]
            {
                2.520684772022719e-09, 2.520665232097485e-09, 2.520645470127647e-09, 2.520624819979389e-09, 2.520603947786526e-09, 2.520582853549058e-09, 2.520560871133171e-09, 2.520538444628073e-09, 2.520515351989161e-09, 2.520492037305644e-09, 2.520467834443707e-09, 2.520443187492560e-09, 2.520417874407599e-09, 2.520391673144218e-09, 2.520364805747022e-09, 2.520337494260616e-09, 2.520308628461976e-09, 2.520279318574126e-09, 2.520248898463251e-09, 2.520217590173957e-09, 2.520184949617033e-09, 2.520151420881689e-09, 2.520116559878716e-09, 2.520080144563508e-09, 2.520042619025276e-09, 2.520003539174809e-09, 2.519962905012108e-09, 2.519920716537172e-09, 2.519876529660792e-09, 2.519830566427572e-09, 2.519782160703699e-09, 2.519731534533776e-09, 2.519678909962408e-09, 2.519623620855782e-09, 2.519565001080082e-09, 2.519504160858332e-09, 2.519439101789089e-09, 2.519370934095377e-09, 2.519299435732592e-09, 2.519223496477707e-09, 2.519143116330724e-09, 2.519058073247038e-09, 2.518967257003624e-09, 2.518871111689691e-09, 2.518768416059913e-09, 2.518659059091988e-09, 2.518542041585192e-09, 2.518417030472619e-09, 2.518283137575850e-09, 2.518139030627253e-09, 2.517984154515318e-09, 2.517817176972414e-09, 2.517636765730913e-09, 2.517441810567789e-09, 2.517230313081598e-09, 2.517000607937803e-09, 2.516750474690355e-09, 2.516477470848599e-09, 2.516179042899580e-09, 2.515851749151921e-09, 2.515492258936547e-09, 2.515095687272151e-09, 2.514657704288936e-09, 2.514172314782570e-09, 2.513632857414905e-09, 2.513031338580163e-09, 2.512358321382635e-09, 2.511602925636680e-09, 2.510751939688305e-09, 2.509789043259048e-09, 2.508695917669002e-09, 2.507448693123138e-09, 2.506019447512386e-09, 2.504373153300321e-09, 2.502467177922796e-09, 2.500247509029663e-09, 2.497646811594478e-09, 2.494579376399741e-09, 2.490935235854863e-09, 2.486572059368086e-09, 2.481303162937820e-09, 2.474880689273817e-09, 2.466970683290270e-09, 2.457116510257151e-09, 2.444683122604374e-09, 2.428769518836305e-09, 2.408070576276344e-09, 2.377086694149710e-09, 2.341755483969976e-09, 2.297702500486665e-09, 2.242774105321033e-09, 2.174284835509965e-09, 2.088886258411193e-09, 1.982402894618041e-09, 1.849628367134315e-09, 1.684070757845824e-09, 1.477634958835239e-09, 1.220227058285062e-09, 8.992606936875092e-10, 4.990415580774510e-10, -4.208324063460023e-23, -6.222658915921997e-10, -1.398183520351370e-09, -2.365693620165477e-09, -3.572105541915782e-09, -5.076410555804323e-09, -6.952166481388744e-09, -9.291094477115180e-09, -1.220756418174318e-08, -1.584418615752092e-08, -2.037878504834723e-08, -2.603309548487864e-08, -3.308360396747645e-08, -4.187506874586688e-08, -5.283737797290300e-08, -6.650657008444583e-08, -8.355104497148602e-08, -1.048042475026989e-07, -1.313054202034536e-07, -1.643504193848955e-07, -2.055550786805860e-07, -2.569342167357824e-07, -3.210001533471285e-07, -4.008855497006358e-07, -5.004965768495850e-07, -6.247039000539800e-07, -7.795808144028804e-07, -9.727001680781555e-07, -1.213504582209257e-06, -1.513768057126441e-06, -1.888171507258285e-06, -2.355020333966173e-06, -2.937139061187644e-06, -3.662986687191783e-06, -4.568047149322574e-06, -5.696562662471649e-06, -7.103694343313371e-06, -8.858215224893939e-06, -1.104586649613992e-05, -1.377353976839135e-05, -1.717448782856401e-05, -2.141481549666757e-05, -2.670156304585003e-05, -3.329276978403239e-05, -4.150999799001909e-05, -5.175391113165784e-05, -6.452363947340167e-05, -8.044083560621029e-05, -1.002795273874479e-04, -1.250031215935810e-04, -1.558102031383735e-04, -1.941911153575671e-04, -2.419976966701043e-04, -3.015289819709999e-04, -3.756361370876871e-04, -4.678503484655261e-04, -5.825377787510577e-04, -7.250859239573693e-04, -9.021256153491919e-04, -1.121792269134003e-03, -1.394028472938125e-03, -1.730927173392072e-03, -2.147110055102930e-03, -2.660128591201127e-03, -3.290865203195770e-03, -4.063898853375880e-03, -5.007783850110581e-03, -6.155174663232454e-03, -7.542716995735610e-03, -9.210622154914416e-03, -1.120185508845695e-02, -1.356090248193720e-02, -1.633214752923018e-02, -1.955795521186077e-02, -2.327664874080670e-02, -2.752061007748430e-02, -3.231474336297313e-02, -3.767549113965840e-02, -4.361050039792103e-02, -5.011892568465481e-02, -5.719226101519492e-02, -6.481553363482995e-02, -7.296867749909053e-02, -8.162792502435989e-02, -9.076709703974606e-02, -1.003587176774912e-01, -1.103749223580961e-01, -1.207881578254542e-01, -1.315716925839103e-01, -1.426999658664194e-01, -1.541488061342959e-01, -1.657503400456242e-01, -1.777910925648698e-01, -1.900803864840876e-01, -2.026085006742189e-01, -2.153584145745533e-01, -2.283148580981829e-01, -2.414637889156301e-01, -2.547923169214592e-01, -2.682886102289088e-01, -2.819418060915544e-01
            };

            var netlist = Run(
                ".model 1N914 D(Is= 2.52n Rs = .568 N= 1.752 Cjo= 4p M = .4 tt= 20n)",
                "V1 OUT 0 0",
                "D1 OUT 0 1N914",
                ".DC V1 -1 1 10m",
                ".SAVE I(V1)"
                );

            int index = 0;
            netlist.OnExportSimulationData += (object sender, SimulationData data) =>
            {
                double actual = netlist.Exports[0].Extract(data);
                double expected = reference[index++];
                double tol = Math.Max(Math.Abs(actual), Math.Abs(expected)) * 1e-3 + 1e-12;
                Assert.AreEqual(expected, actual, tol);
            };
            netlist.Simulate();
        }

        [TestMethod]
        public void TestDiodeAC()
        {
            double[] refi = new double[]
            {
                -1.945791742986885e-12, -1.904705637099517e-08, -1.946103289747125e-12, -3.018754997881332e-08, -1.946885859826953e-12, -4.784404245850086e-08, -1.948851586992178e-12, -7.582769719229839e-08, -1.953789270386556e-12, -1.201788010800761e-07, -1.966192170307985e-12, -1.904705637099495e-07, -1.997346846331992e-12, -3.018754997881245e-07, -2.075603854314768e-12, -4.784404245849736e-07, -2.272176570837208e-12, -7.582769719228451e-07, -2.765944910274710e-12, -1.201788010800207e-06, -4.006234902415568e-12, -1.904705637097290e-06, -7.121702504803603e-12, -3.018754997872460e-06, -1.494740330300116e-11, -4.784404245814758e-06, -3.460467495474045e-11, -7.582769719089195e-06, -8.398150889530617e-11, -1.201788010744768e-05, -2.080105080892987e-10, -1.904705636876583e-05, -5.195572682013223e-10, -3.018754996993812e-05, -1.302127347221150e-09, -4.784404242316795e-05, -3.267854507347871e-09, -7.582769705163549e-05, -8.205537869558709e-09, -1.201788005200868e-04, -2.060843758802494e-08, -1.904705614805916e-04
            };

            var netlist = Run(
                ".model 1N914 D(Is= 2.52n Rs = .568 N= 1.752 Cjo= 4p M = .4 tt= 20n)",
                "V1 out 0 DC 1 AC 1 0",
                "D1 0 out 1N914",
                ".SAVE ir(V1) ii(V1)",
                ".AC dec 5 1k 10meg"
                );

            int index = 0;
            netlist.OnExportSimulationData += (object sender, SimulationData data) =>
            {
                // Test real part
                double actual = netlist.Exports[0].Extract(data);
                double expected = refi[index++];
                double tol = Math.Max(Math.Abs(actual), Math.Abs(expected)) * 1e-6 + 1e-12;
                Assert.AreEqual(expected, actual, tol);

                // Test imaginary part
                actual = netlist.Exports[1].Extract(data);
                expected = refi[index++];
                tol = Math.Max(Math.Abs(actual), Math.Abs(expected)) * 1e-6 + 1e-12;
                Assert.AreEqual(expected, actual, tol);
            };
            netlist.Simulate();
        }

        [TestMethod]
        public void TestDiodeTransient()
        {
            double[] reft = new double[]
            {
                0.000000000000000e+00, 1.000000000000000e-11, 2.000000000000000e-11, 4.000000000000000e-11, 8.000000000000001e-11, 1.600000000000000e-10, 3.200000000000000e-10, 6.400000000000001e-10, 1.280000000000000e-09, 2.560000000000000e-09, 5.120000000000001e-09, 1.024000000000000e-08, 2.048000000000000e-08, 4.096000000000000e-08, 8.192000000000001e-08, 1.638400000000000e-07, 3.276800000000000e-07, 5.276800000000000e-07, 7.276800000000000e-07, 9.276800000000000e-07, 1.000000000000000e-06, 1.001000000000000e-06, 1.003000000000000e-06, 1.007000000000000e-06, 1.010000000000000e-06, 1.010800000000000e-06, 1.012400000000000e-06, 1.015600000000000e-06, 1.022000000000000e-06, 1.031911430391792e-06, 1.048369261785013e-06, 1.069191308645388e-06, 1.095608292834102e-06, 1.130209722171300e-06, 1.184768886540801e-06, 1.276944878679060e-06, 1.461296862955580e-06, 1.661296862955580e-06, 1.861296862955580e-06, 2.010000000000000e-06, 2.011000000000000e-06, 2.013000000000000e-06, 2.017000000000000e-06, 2.020000000000000e-06, 2.020800000000000e-06, 2.022400000000000e-06, 2.025600000000000e-06, 2.032000000000000e-06, 2.044799999999999e-06, 2.061436842547180e-06, 2.078952305431347e-06, 2.098815989369024e-06, 2.127583095730346e-06, 2.183527668213025e-06, 2.295416813178385e-06, 2.495416813178385e-06, 2.695416813178385e-06, 2.895416813178384e-06, 3.000000000000000e-06, 3.001000000000000e-06, 3.003000000000000e-06, 3.007000000000000e-06, 3.010000000000000e-06, 3.010800000000000e-06, 3.012400000000000e-06, 3.015600000000000e-06, 3.022000000000000e-06, 3.031911417875101e-06, 3.048369174339688e-06, 3.069191221519299e-06, 3.095608160179535e-06, 3.130209544871514e-06, 3.184768522337625e-06, 3.276944226536039e-06, 3.461295634932866e-06, 3.661295634932866e-06, 3.861295634932866e-06, 4.010000000000000e-06, 4.010999999999999e-06, 4.013000000000000e-06, 4.017000000000000e-06, 4.020000000000000e-06, 4.020800000000000e-06, 4.022400000000000e-06, 4.025600000000000e-06, 4.032000000000000e-06, 4.044800000000000e-06, 4.061436842546919e-06, 4.078952305431358e-06, 4.098815989369235e-06, 4.127583095731905e-06, 4.183527668216395e-06, 4.295416813185373e-06, 4.495416813185372e-06, 4.695416813185372e-06, 4.895416813185372e-06, 5.000000000000000e-06, 5.000999999999999e-06, 5.002999999999999e-06, 5.007000000000000e-06, 5.009999999999999e-06, 5.010800000000000e-06, 5.012400000000000e-06, 5.015600000000000e-06, 5.022000000000000e-06, 5.031911417875101e-06, 5.048369174339686e-06, 5.069191221519295e-06, 5.095608160179533e-06, 5.130209544871505e-06, 5.184768522337617e-06, 5.276944226536067e-06, 5.461295634932967e-06, 5.661295634932967e-06, 5.861295634932966e-06, 6.009999999999999e-06, 6.010999999999999e-06, 6.012999999999999e-06, 6.016999999999999e-06, 6.019999999999999e-06, 6.020799999999999e-06, 6.022399999999999e-06, 6.025600000000000e-06, 6.031999999999999e-06, 6.044799999999999e-06, 6.061436842546919e-06, 6.078952305431357e-06, 6.098815989369235e-06, 6.127583095731905e-06, 6.183527668216393e-06, 6.295416813185368e-06, 6.495416813185368e-06, 6.695416813185367e-06, 6.895416813185367e-06, 6.999999999999999e-06, 7.001000000000000e-06, 7.003000000000000e-06, 7.007000000000000e-06, 7.010000000000000e-06, 7.010800000000000e-06, 7.012400000000000e-06, 7.015600000000000e-06, 7.022000000000001e-06, 7.031911417875102e-06, 7.048369174339689e-06, 7.069191221519296e-06, 7.095608160179537e-06, 7.130209544871513e-06, 7.184768522337624e-06, 7.276944226536064e-06, 7.461295634932944e-06, 7.661295634932945e-06, 7.861295634932945e-06, 8.010000000000000e-06, 8.011000000000000e-06, 8.012999999999999e-06, 8.017000000000000e-06, 8.019999999999999e-06, 8.020800000000000e-06, 8.022400000000000e-06, 8.025600000000000e-06, 8.032000000000000e-06, 8.044800000000000e-06, 8.061436842546919e-06, 8.078952305431358e-06, 8.098815989369237e-06, 8.127583095731908e-06, 8.183527668216399e-06, 8.295416813185379e-06, 8.495416813185379e-06, 8.695416813185379e-06, 8.895416813185379e-06, 9.000000000000000e-06, 9.001000000000001e-06, 9.003000000000000e-06, 9.007000000000000e-06, 9.010000000000000e-06, 9.010800000000000e-06, 9.012400000000000e-06, 9.015600000000001e-06, 9.022000000000001e-06, 9.031911417875101e-06, 9.048369174339687e-06, 9.069191221519297e-06, 9.095608160179534e-06, 9.130209544871508e-06, 9.184768522337627e-06, 9.276944226536070e-06, 9.461295634932955e-06, 9.661295634932954e-06, 9.861295634932954e-06, 9.999999999999999e-06
            };
            double[] refv = new double[]
            {
                2.499987387600927e+00, 2.499987387600927e+00, 2.499987387600928e+00, 2.499987387600930e+00, 2.499987387600930e+00, 2.499987387600930e+00, 2.499987387600929e+00, 2.499987387600930e+00, 2.499987387600929e+00, 2.499987387600931e+00, 2.499987387600932e+00, 2.499987387600930e+00, 2.499987387600925e+00, 2.499987387600928e+00, 2.499987387600926e+00, 2.499987387600928e+00, 2.499987387600926e+00, 2.499987387600927e+00, 2.499987387600927e+00, 2.499987387600928e+00, 2.499987387600927e+00, 2.961821123677441e+00, 3.815595031050632e+00, 5.191497375836692e+00, 6.033868333676702e+00, 5.858562191713297e+00, 5.542208256161848e+00, 5.047949608971144e+00, 4.566109930365761e+00, 4.496204694441634e+00, 4.470633619893430e+00, 4.461739126144179e+00, 4.458735839003547e+00, 4.458038898753162e+00, 4.458105659592958e+00, 4.458101331200549e+00, 4.458103397187390e+00, 4.458102054214761e+00, 4.458102946499696e+00, 4.458102386130604e+00, 3.958693411280502e+00, 2.960914649979985e+00, 9.726427700084964e-01, -5.082383499091155e-01, -5.008345064144687e-01, -4.824425124285373e-01, -4.093717899310994e-01, 2.924887048069172e-01, 1.580971980369440e+00, 2.297627508401225e+00, 2.465954137574416e+00, 2.496576060032440e+00, 2.500278626658742e+00, 2.499872214958067e+00, 2.500061543600388e+00, 2.499929261741765e+00, 2.500032947932400e+00, 2.499951676152186e+00, 2.500009660939910e+00, 2.961841609544899e+00, 3.815612080183933e+00, 5.191508748208870e+00, 6.033876548352698e+00, 5.858569729195014e+00, 5.542214591696127e+00, 5.047954150255141e+00, 4.566110570191042e+00, 4.496204841281153e+00, 4.470633717559513e+00, 4.461739151542467e+00, 4.458735845471297e+00, 4.458038898205160e+00, 4.458105659443782e+00, 4.458101331262269e+00, 4.458103397146694e+00, 4.458102054241805e+00, 4.458102946481730e+00, 4.458102386139813e+00, 3.958693411289590e+00, 2.960914649988631e+00, 9.726427700174073e-01, -5.082383498975664e-01, -5.008345064015178e-01, -4.824425124111943e-01, -4.093717898771109e-01, 2.924887049622513e-01, 1.580971980460653e+00, 2.297627508417691e+00, 2.465954137578724e+00, 2.496576060033046e+00, 2.500278626658768e+00, 2.499872214958052e+00, 2.500061543600398e+00, 2.499929261741757e+00, 2.500032947932406e+00, 2.499951676152183e+00, 2.500009660939873e+00, 2.961841609544864e+00, 3.815612080183901e+00, 5.191508748208831e+00, 6.033876548352796e+00, 5.858569729195150e+00, 5.542214591696239e+00, 5.047954150255220e+00, 4.566110570191053e+00, 4.496204841281158e+00, 4.470633717559518e+00, 4.461739151542469e+00, 4.458735845471298e+00, 4.458038898205158e+00, 4.458105659443782e+00, 4.458101331262271e+00, 4.458103397146695e+00, 4.458102054241805e+00, 4.458102946481730e+00, 4.458102386139918e+00, 3.958693411289800e+00, 2.960914649988843e+00, 9.726427700176185e-01, -5.082383498974148e-01, -5.008345064015201e-01, -4.824425124111975e-01, -4.093717898771213e-01, 2.924887049622209e-01, 1.580971980460636e+00, 2.297627508417681e+00, 2.465954137578724e+00, 2.496576060033047e+00, 2.500278626658769e+00, 2.499872214958052e+00, 2.500061543600398e+00, 2.499929261741757e+00, 2.500032947932406e+00, 2.499951676152183e+00, 2.500009660939873e+00, 2.961841609544861e+00, 3.815612080183887e+00, 5.191508748208779e+00, 6.033876548352758e+00, 5.858569729195099e+00, 5.542214591696174e+00, 5.047954150255137e+00, 4.566110570191032e+00, 4.496204841281155e+00, 4.470633717559513e+00, 4.461739151542469e+00, 4.458735845471298e+00, 4.458038898205160e+00, 4.458105659443782e+00, 4.458101331262270e+00, 4.458103397146695e+00, 4.458102054241805e+00, 4.458102946481730e+00, 4.458102386139918e+00, 3.958693411289377e+00, 2.960914649988845e+00, 9.726427700176202e-01, -5.082383498974127e-01, -5.008345064015177e-01, -4.824425124111943e-01, -4.093717898771107e-01, 2.924887049622511e-01, 1.580971980460655e+00, 2.297627508417698e+00, 2.465954137578724e+00, 2.496576060033045e+00, 2.500278626658769e+00, 2.499872214958053e+00, 2.500061543600398e+00, 2.499929261741757e+00, 2.500032947932406e+00, 2.499951676152183e+00, 2.500009660939873e+00, 2.961841609545255e+00, 3.815612080183843e+00, 5.191508748208792e+00, 6.033876548352767e+00, 5.858569729195123e+00, 5.542214591696219e+00, 5.047954150255206e+00, 4.566110570191052e+00, 4.496204841281157e+00, 4.470633717559517e+00, 4.461739151542467e+00, 4.458735845471296e+00, 4.458038898205158e+00, 4.458105659443781e+00, 4.458101331262271e+00, 4.458103397146695e+00, 4.458102054241805e+00, 4.458102946481729e+00, 4.458102394628059e+00
            };

            var netlist = Run(
                ".model 1N914 D(Is = 2.52n Rs = .568 N = 1.752 Cjo = 4p M = .4 tt = 20n)",
                "V1 in 0 PULSE(0 5 1u 10n 10n 1u 2u)",
                "Vsupply vdd 0 5",
                "R1 vdd out 10k",
                "R2 out gnd 10k",
                "D1 in out 1N914",
                ".SAVE v(out)",
                ".tran 1n 10u"
                );
            TestTransient(netlist, reft, refv);
        }

        [TestMethod]
        public void TestDiodeNoise()
        {
            // Reference values
            double[] reference_in = new double[]
            {
                1.458723146141516e-11, 1.158744449455564e-11, 9.204629008621217e-12, 7.311891390005244e-12, 5.808436458613778e-12, 4.614199756974079e-12, 3.665583825917668e-12, 2.912071407970298e-12, 2.313535219179339e-12, 1.838101024918417e-12, 1.460450220663579e-12, 1.160471523977627e-12, 9.221899753841851e-13, 7.329162135225879e-13, 5.825707203834413e-13, 4.631470502194715e-13, 3.682854571138305e-13, 2.929342153190935e-13, 2.330805964399977e-13, 1.855371770139055e-13, 1.477720965884216e-13, 1.177742269198265e-13, 9.394607206048226e-14, 7.501869587432254e-14, 5.998414656040787e-14, 4.804177954401090e-14, 3.855562023344681e-14, 3.102049605397311e-14, 2.503513416606353e-14, 2.028079222345432e-14, 1.650428418090594e-14, 1.350449721404642e-14, 1.112168172811200e-14, 9.228944109496031e-15, 7.725489178104568e-15, 6.531252476464870e-15, 5.582636545408461e-15, 4.829124127461094e-15, 4.230587938670135e-15, 3.755153744409214e-15, 3.377502940154375e-15, 3.077524243468425e-15, 2.839242694874982e-15, 2.649968933013386e-15, 2.499623439874239e-15, 2.380199769710269e-15, 2.285338176604629e-15, 2.209986934809892e-15, 2.150133315930796e-15, 2.102589896504704e-15, 2.064824816079220e-15, 2.034826946410625e-15, 2.010998791551281e-15, 1.992071415365121e-15, 1.977036866051207e-15, 1.965094499034810e-15, 1.955608339724246e-15, 1.948073215544772e-15, 1.942087853656863e-15, 1.937333511714254e-15, 1.933557003671705e-15, 1.930557216704845e-15, 1.928174401218911e-15, 1.926281663600295e-15, 1.924778208668904e-15, 1.923583971967264e-15, 1.922635356036208e-15, 1.921881843618260e-15, 1.921283307429469e-15, 1.920807873235208e-15, 1.920430222430954e-15, 1.920130243734267e-15, 1.919891962185674e-15, 1.919702688423812e-15, 1.919552342930673e-15, 1.919432919260510e-15, 1.919338057667404e-15, 1.919262706425609e-15, 1.919202852806730e-15, 1.919155309387304e-15, 1.919117544306878e-15, 1.919087546437210e-15, 1.919063718282350e-15, 1.919044790906164e-15, 1.919029756356850e-15, 1.919017813989834e-15, 1.919008327830523e-15, 1.919000792706344e-15, 1.918994807344456e-15, 1.918990053002513e-15, 1.918986276494471e-15
            };
            double[] reference_out = new double[]
            {
                8.534638344391308e-14, 6.779535126890105e-14, 5.385407086373468e-14, 4.278011820970267e-14, 3.398376494660514e-14, 2.699657318711771e-14, 2.144644949112401e-14, 1.703782953318393e-14, 1.353593822442315e-14, 1.075428708293890e-14, 8.544743042104929e-15, 6.789639824603726e-15, 5.395511784087090e-15, 4.288116518683889e-15, 3.408481192374137e-15, 2.709762016425394e-15, 2.154749646826024e-15, 1.713887651032016e-15, 1.363698520155939e-15, 1.085533406007514e-15, 8.645790019241169e-16, 6.890686801739967e-16, 5.496558761223330e-16, 4.389163495820129e-16, 3.509528169510376e-16, 2.810808993561634e-16, 2.255796623962265e-16, 1.814934628168257e-16, 1.464745497292180e-16, 1.186580383143755e-16, 9.656259790603582e-17, 7.901156573102381e-17, 6.507028532585746e-17, 5.399633267182545e-17, 4.519997940872793e-17, 3.821278764924051e-17, 3.266266395324682e-17, 2.825404399530675e-17, 2.475215268654597e-17, 2.197050154506173e-17, 1.976095750422776e-17, 1.800585428672656e-17, 1.661172624620993e-17, 1.550433098080673e-17, 1.462469565449698e-17, 1.392597647854824e-17, 1.337096410894887e-17, 1.293010211315486e-17, 1.257991298227878e-17, 1.230174786813036e-17, 1.208079346404696e-17, 1.190528314229684e-17, 1.176587033824518e-17, 1.165513081170486e-17, 1.156716727907389e-17, 1.149729536147901e-17, 1.144179412451907e-17, 1.139770792493967e-17, 1.136268901185206e-17, 1.133487250043722e-17, 1.131277706002888e-17, 1.129522602785387e-17, 1.128128474744870e-17, 1.127021079479467e-17, 1.126141444153157e-17, 1.125442724977209e-17, 1.124887712607609e-17, 1.124446850611815e-17, 1.124096661480939e-17, 1.123818496366791e-17, 1.123597541962708e-17, 1.123422031640957e-17, 1.123282618836906e-17, 1.123171879310365e-17, 1.123083915777734e-17, 1.123014043860140e-17, 1.122958542623180e-17, 1.122914456423600e-17, 1.122879437510513e-17, 1.122851620999098e-17, 1.122829525558689e-17, 1.122811974526514e-17, 1.122798033246109e-17, 1.122786959293455e-17, 1.122778162940192e-17, 1.122771175748433e-17, 1.122765625624737e-17, 1.122761217004779e-17, 1.122757715113470e-17, 1.122754933462328e-17, 1.122752723918288e-17
            };

            // Note: Added Kf/Af for flicker noise, forward bias for shot noise, Rs != 0 for thermal noise
            var netlist = Run(
                ".model 1N914 D(Is= 2.52n Rs = .568 N= 1.752 Cjo= 4p M = .4 tt= 20n Kf=1e-14 Af=0.9)",
                "V1 in 0 DC 1 AC 1 0",
                "R1 in out 10k",
                "D1 out 0 1N914",
                ".noise v(out) V1 dec 10 10 10g");
            TestNoise(netlist, reference_in, reference_out);
        }
    }
}
